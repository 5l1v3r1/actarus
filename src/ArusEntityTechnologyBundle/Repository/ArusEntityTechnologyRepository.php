<?php

namespace ArusEntityTechnologyBundle\Repository;

use Actarus\Utils;


/**
 * ArusEntityTechnologyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArusEntityTechnologyRepository extends \Doctrine\ORM\EntityRepository
{
	public function search( $data, $offset=null, $limit=null )
	{
		$data = Utils::array2object( $data, 'ArusEntityTechnologyBundle\Entity\Search' );
		$t_params = array();
		$qb = $this->_em->createQueryBuilder();
		
		if( $offset < 0 ) {
			$offset = null;
			$count  = true;
			$query  = $qb->select( 'count(et.id)' );
		} else {
			$count  = false;
			$query  = $qb->select( array('et,t') );
		}
		$query = $query->from('ArusEntityTechnologyBundle:ArusEntityTechnology','et')
						->leftJoin('et.technology','t');
		
		if( $data )
		{
			if ($data->getEntityId()) {
				$query->andWhere('et.entityId LIKE :entity_id');
				$t_params['entity_id'] = $data->getEntityId();
			}
			if ($data->getEntityType()) {
				$query->andWhere('et.entityId LIKE :entity_type');
				$t_params['entity_type'] = $data->getEntityType().'%';
			}
			if ($data->getTechnology()) {
				$query->andWhere('t.name LIKE :name');
				$t_params['name'] = '%'.$data->getTechnology().'%';
			}
			if ($data->getTechnologyId()) {
				$query->andWhere('et.technology=:technology_id');
				$t_params['technology_id'] = $data->getTechnologyId();
			}
		}
		
		$query->setParameters( $t_params );
		$query->orderBy('et.id', 'DESC');
		if( !is_null($limit) ) {
			$query->setMaxResults( $limit );
		}
		if( !is_null($offset) ) {
			$query->setFirstResult($offset);
		}
		
		$t_result = $query->getQuery()->getResult();
		
		if( $count ) {
			return (int)$t_result[0][1];
		} else {
			return $t_result;
		}
	}
	
	
	public function getRelatedEntity( $techno, $t_entity_type )
	{
		$type = substr( $techno->getEntityId(), 0, 1 );
		$entity = 'Arus'.ucfirst($t_entity_type[$type]);
		$related = $this->_em->getRepository($entity.'Bundle:'.$entity)->findOneByEntityId( $techno->getEntityId() );
	
		return $related; 
	}
	
	
	public function deleteEntity( $entity )
	{
		$qb = $this->createQueryBuilder( 'et' );
		$isDeleted = $qb->delete()->where( 'et.entityId LIKE :entity_id' )->setParameter( 'entity_id',$entity->getEntityId() )->getQuery()->execute();
		return $isDeleted;
	}
}
